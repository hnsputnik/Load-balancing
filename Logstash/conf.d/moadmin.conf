filter {        
	if [type] == "moadmin" {
                grok {                       
			match => { "message" => "%{TIMESTAMP_ISO8601:time} - info: %{GREEDYDATA:payload}"}        
                }
                #json {  
                #        source => "payload"
                #        target => "payload"
                #}
                #json {  
                #        source => "[payload][atts]"
                #        target => "[payload][atts]"
                #}
		if [payload] {
      ruby {
        init => "
          require 'json'
          SEPARATOR = '>'
          def flatten_json event, source, target
            obj = event.get(source)
            obj = JSON.parse(obj) unless obj.is_a? Hash
            obj = obj.to_hash unless obj.is_a? Hash
            value = {}
            flatten_object(obj, nil, value)
            event.set(target, value)
          end

          def flatten_object obj, pname=nil, target
            obj.each {|k,v|
              p = pname.nil?? k : pname
              if v.is_a? Array
                v.each_with_index {|oo,ii|
                  flatten_array(oo,ii,p,target)
                }
              elsif v.is_a? Hash
                flatten_object(v,p,target)
              else
                p = pname.nil?? k : [pname,k].join(SEPARATOR)
                target[p] = v
              end
            }
          end

          def flatten_array obj, i,pname, target
            obj = JSON.parse(obj) unless obj.is_a? Hash
            pname_ = pname
            if obj.is_a? Hash
              obj.each {|k,v|

                p=[pname_,i,k].join(SEPARATOR)
                if v.is_a? Array
                  v.each_with_index {|oo,ii|
                    flatten_array(oo,ii,p,target)
                  }
                elsif v.is_a? Hash
                  flatten_object(v,p, target)
                else
                  target[p] = v
                end
              }
            else
              n = [pname_, i].join(SEPARATOR)
              target[n] = obj
            end
          end
        "
        code => "flatten_json(event, 'payload', 'payload') if event.get('payload').to_s.include? ':'"
      }
    }
        }
}
